call apoc.load.json($filename) yield value unwind value.entry as ent
with ent
where ent.resource.resourceType ="Procedure"
  merge (pr: Procedure {
  id: ent.resource.id,
  type: ent.resource.resourceType, 
  status: ent.resource.status, 
  name: ent.resource.code.text,
  datestart: split(ent.resource.performedPeriod.start, 'T')[0],
  dateend: split(ent.resource.performedPeriod.end, 'T')[0]
})
;
call apoc.load.json($filename) yield value unwind value.entry as ent
with ent
where ent.resource.resourceType ="Procedure"
  MATCH(pr: Procedure {id: ent.resource.id})
  MATCH(p:Patient{id: replace(ent.resource.subject.reference, "urn:uuid:", "")})
  MATCH(e:Encounter{id: replace(ent.resource.encounter.reference, "urn:uuid:", "")})
  MERGE(l:Location{id: ent.resource.location.reference})
  
  WITH ent,pr,e,p,l
    MERGE (pr)-[:HAS_SUBJECT]->(p)
    MERGE (pr)-[:IN_ENCOUNTER]->(e)
    MERGE (e)-[:INCLUDES_PROCEDURE]->(pr)
    MERGE (pr)-[:PERFORMED_AT{date:split(ent.resource.performedPeriod.start, 'T')[0]}]->(l)
    MERGE (l)-[:PERFORMED_PROCEDURE{date:split(ent.resource.performedPeriod.start, 'T')[0]}]->(pr)
    MERGE (p)-[:PROCEDURE_HISTORY{date:split(ent.resource.performedPeriod.start, 'T')[0]}]->(pr)
;
call apoc.load.json($filename) yield value unwind value.entry as ent
with ent
where ent.resource.resourceType ="Procedure" AND ent.resource.reasonReference IS NOT NULL
  MATCH(pr: Procedure {id: ent.resource.id})
  MATCH(c:Condition{id: replace(ent.resource.reasonReference[0].reference, "urn:uuid:", "")})

  WITH ent,pr,c
    MERGE (pr)-[:TO_TREAT]->(c)
    MERGE (c)-[:TREATED_BY]->(pr)
;
call apoc.load.json($filename) yield value unwind value.entry as ent
with ent
where ent.resource.resourceType ="Procedure" AND ent.resource.code.coding IS NOT NULL
  MATCH(pr: Procedure {id: ent.resource.id})
  MERGE(code: Coding{code: ent.resource.code.coding[0].code,
                            system: ent.resource.code.coding[0].system})
                SET code.display = ent.resource.code.coding[0].display

  WITH ent,pr,code
    MERGE (pr)-[:HAS_CODE]->(code)
;
